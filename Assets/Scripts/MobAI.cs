using UnityEngine;
using UnityEngine.AI;
using System.Collections; // Required for IEnumerator (if you add coroutines)

// Ensures these components are attached to the GameObject when MobAI is added
[RequireComponent(typeof(HealthSystem))]
[RequireComponent(typeof(NavMeshAgent))]
[RequireComponent(typeof(Animator))] // Added Animator requirement
[RequireComponent(typeof(Rigidbody))] // Added Rigidbody requirement for consistency

public class MobAI : MonoBehaviour
{
    // Enum ??? ????????? ????
    // ??????? public, ????? ?????? ??????? ????? ??? ?????? (????????, BossAI ??? ZombieAudio)
    public enum MobState
    {
        Idle,      // ????? ??? ????
        Chasing,   // ?????????? ??????
        Attacking, // ??????? ??????
        Fleeing,   // ??????? ?? ?????? (? ?????? ?????? ??? ?????? ????????)
        Stunned,   // ???????
        Dead       // ?????
    }

    [Header("AI State")]
    // ??????????: ???????? ?? private, ?.?. MobAI ?????????? ?????????? currentState
    private MobState currentState = MobState.Idle;
    private float stunEndTime = 0f; // ?????, ????? ?????????? ?????????

    [Header("Movement & Combat")]
    [SerializeField] private float mobSpeed = 3.5f; // ???????? ????????????
    [SerializeField] private float mobFleeSpeed = 5f; // ???????? ????????
    [SerializeField] private float mobStoppingDistance = 2f; // ?????????, ?? ??????? ??? ??????????????? ????? ????? (??? ?????)
    // ??????????: ???????? ?? protected, ???? BossAI ?????????, ????? ???????? private
    [SerializeField] protected float mobAgroRadius = 10f; // ?????? ??????????? ?????? (??????????? ?????)
    [SerializeField] private float mobAttackRate = 1f; // ???? ? ??????? (????????????????)
    [SerializeField] private float stunDuration = 1.5f; // ???????????? ?????????

    [Header("Peaceful Mode Settings")]
    [SerializeField] private float fleeHealthPercentage = 0.3f; // % ????????, ???? ???????? ??? ???????
    [SerializeField] private float fleeDistance = 15f; // ??????????, ?? ??????? ??? ???????? ??????? ?? ??????

    // References (????? ???????? ????? GetComponent ? Awake)
    private HealthSystem mobHealth;
    private Rigidbody mobRigidbody;
    private ZombieAudio zombieAudio;
    private Animator mobAnimator;
    // navMeshAgent ??? public ??? ??????? ?? ZombieAudio
    public NavMeshAgent navMeshAgent; // ?????? ?? NavMeshAgent

    // Internal state/timing
    private float lastAttackTime; // ????? ????????? ?????
    private bool wasPreviouslyAgroSoundPlayed = false; // ???? ??? ????? ????

    private Transform playerTransform; // ?????? ?? Transform ??????


    [Header("Animator Parameters")]
    [SerializeField] private string isWalkingBoolName = "IsWalking"; // ??? ???????? ????????? ??? ??????
    [SerializeField] private string attackTriggerName = "Attack"; // ??? ???????? ??? ?????
    [SerializeField] private string isFleeingBoolName = "IsFleeing"; // ??? ???????? ????????? ??? ???????? (???????????)
    [SerializeField] private string stunTriggerName = "Stun"; // ??? ???????? ??? ?????
    [SerializeField] private string deathTriggerName = "Death"; // ??? ???????? ??? ?????? (??????? ??? ???????????????)


    // Assumes PeaceModeManager class exists and has a public static bool IsPeacefulModeActive
    // If not, you will get a CS0122 error for PeaceModeManager or CS0246 if the class doesn't exist.


    private void Awake()
    {
        // --- ???????? ??? ??????????? ?????????? ? ????????? ?? null (? warnings/errors) ---
        mobHealth = GetComponent<HealthSystem>();
        if (mobHealth == null) Debug.LogWarning("HealthSystem component not found on " + gameObject.name + ". Mob death and health logic will not work.", this);

        navMeshAgent = GetComponent<NavMeshAgent>();
        if (navMeshAgent == null)
        {
             Debug.LogError("NavMeshAgent component not found on " + gameObject.name + ". Mob AI will not work correctly! Script disabled.", this);
             enabled = false; // ?????? ?? ????? ???????? ??? NavMeshAgent
             return;
        }

        mobRigidbody = GetComponent<Rigidbody>();
        // Rigidbody is not strictly required for NavMeshAgent movement, but good for physics interactions (like death).
        if (mobRigidbody == null) Debug.LogWarning("Rigidbody component not found on " + gameObject.name + ". Mob physics interaction might be affected, especially on death.", this);

        zombieAudio = GetComponent<ZombieAudio>();
        if (zombieAudio == null) Debug.LogWarning("ZombieAudio component not found on " + gameObject.name + ". Mob sounds will not play.", this);

        mobAnimator = GetComponent<Animator>();
        // Animator is required for animations
        if (mobAnimator == null)
        {
             Debug.LogError("Animator component not found on " + gameObject.name + ". Mob animations will not work! Consider adding it or removing Animator references.", this);
             // We don't disable the script entirely just for missing animator, but animations will fail.
             // If animations are critical, you might enable = false here.
        }


        // ??????? ?????? ?? ???? "Player"
        GameObject playerObj = GameObject.FindGameObjectWithTag("Player");
        if (playerObj == null)
        {
            Debug.LogError("Player GameObject (with 'Player' tag) not found. Disabling AI for: " + gameObject.name, this);
            enabled = false; // ?????? ?? ????? ???????? ??? ??????
            return;
        }
        playerTransform = playerObj.transform;

        // ????????? ????????? NavMeshAgent
        navMeshAgent.speed = mobSpeed;
        navMeshAgent.stoppingDistance = mobStoppingDistance;
        navMeshAgent.updateRotation = true; // ????????? NavMeshAgent ??????? ????
        navMeshAgent.updatePosition = true; // ????????? NavMeshAgent ??????? ????

        currentState = MobState.Idle; // ????????? ?????????
        lastAttackTime = Time.time; // ????????????? ??????? ?????
    }

    void Update()
    {
        // ???? ????? ????? ??? ??? ?????, ?????????? ?????????
        if (playerTransform == null || currentState == MobState.Dead || !enabled) return;

        // --- ???????? ?? ?????? (???????????? ?????????) ---
        if (mobHealth != null && mobHealth.IsDead())
        {
            if (currentState != MobState.Dead) SwitchState(MobState.Dead);
            return; // ?????????? ?????????, ???? ??? ?????
        }
        // --- ????? ???????? ?? ?????? ---


        // --- ????????? Stun state ? ?????? ??????? ---
        // ???? ??? ???????, ?? ?????? ?? ?????? ?? ????? ?????????
        if (currentState == MobState.Stunned)
        {
            if (Time.time >= stunEndTime)
            {
                SwitchState(MobState.Idle); // ???????????? ? Idle ????? ?????????
            }
            else
            {
                UpdateAnimator(); // ????????? ???????? ???? ? ????? (????????, ???????? ?????)
                return; // ???????? ? ?????, ?????? ?????? ?? ??????
            }
        }
        // --- ????? ????????? Stun state ---


        // Determine behavior based on game mode (Peaceful or Aggressive)
        // ????????????, ??? PeaceModeManager ?????????? ? ????? public static bool IsPeacefulModeActive
        bool peacefulMode = false; // ???????? ?? ?????????, ???? PeaceModeManager ???????????
        // --- ?????????? ???????? PeaceModeManager ---
        try
        {
            peacefulMode = PeaceModeManager.IsPeacefulModeActive;
        }
        catch (System.Exception)
        {
            // PeaceModeManager ??? ??? IsPeacefulModeActive ?? ???????, ???????? ? ??????????? ??????
        }
        // --- ????? ?????????? ???????? ---


        // --- ???????? ?????? ????????? ? ??????????? ?? ?????? ---
        if (peacefulMode)
        {
             HandlePeacefulModeBehavior();
        }
        else // ??????????? ?????
        {
             HandleAggressiveModeBehavior();
        }
        // --- ????? ?????? ?????? ---


        // ????????? ????????? ????????? ? ????? Update
        UpdateAnimator();
    }


    // --- ?????? ????????? ????????? ? ?????? ??????? ---
    // ??? ?????? ?????????? ? ??????????? ?? ?????? ????

    void HandlePeacefulModeBehavior()
    {
        // --- ?????? ??? ??????? ?????? ?? ?? ---
        // 1. ?? ??????? ???? ??? ????? (??? ????????????? ???, ??? NotifyDamageTaken ?? ???????? ???????? ? ?????? ??????)
        // 2. ???? ???? ?? - ???????.
        // ??? ????? ???? ?????? ? ?????????? Idle, Fleeing, Stunned, Dead ? ???? ??????.
        // ???? ?? ?????-?? ??????? ????? ? Chasing ??? Attacking, ??? ???????? ? Update() ?????????????? ?????????????.

        // ????????? ???????? ?????? ???? ? Idle ? ?? ???????? ? ?? ??????
        if (currentState == MobState.Idle && mobHealth != null) //currentState != MobState.Stunned ? Dead ??? ?????? ? ?????? Update
        {
            float currentHealth = mobHealth.GetHealth();
            float maxHealth = mobHealth.GetMaxHealth();
            if (maxHealth > 0) // ????????????? ??????? ?? ????
            {
                float currentHealthRatio = currentHealth / maxHealth;
                if (currentHealthRatio <= fleeHealthPercentage)
                {
                    // ???? ???????? ???? ??????, ????????????? ?? ????????
                    SwitchState(MobState.Fleeing);
                    // ????????????, ProcessFleeing ????? ?????? ? ????????? Update ????? ????? ?????????
                    return;
                }
            }
        }

        // ????????? ???????? ? ??????????? ?? ???????? (???????) ?????????
        switch (currentState)
        {
            case MobState.Fleeing:
                ProcessFleeing(); // ?????????? ???????
                break;
            case MobState.Stunned:
                // ???? ?????????????? ? ?????? Update
                break;
            case MobState.Idle:
                ProcessIdlePeaceful(); // ?????? ????? (????? ??????????? ????????? ?????)
                break;
            // Chasing, Attacking, Dead ????????? ?????????????? ???? ? Update
        }
        // --- ????? ?????? ??? ??????? ?????? ---
    }

    void HandleAggressiveModeBehavior()
    {
        // --- ?????? ??? ???????????? ?????? ?? ?? (??? ?? ???????, ?????????????, ?????) ---
        // ???? ? ?????? ?????????????? ? ?????? Update
        if (currentState == MobState.Stunned || currentState == MobState.Dead) return;

        // ? ??????????? ?????? ??? ????? ???? ?????? ? ?????????? Idle, Chasing, Attacking.
        // ???? ?? ?????-?? ??????? ????? ? Fleeing, ??? ???????? ? Update() ?????????????? ?????????????.

        // ????????, ??? ????? ????
        if (playerTransform == null)
        {
             // ???? ?????? ???, ????????? ? Idle ? ??????????? ??????
             if (currentState != MobState.Idle) SwitchState(MobState.Idle);
             return;
        }

        float distanceToPlayer = Vector3.Distance(transform.position, playerTransform.position);

        // ?????????? ????????? ?? ?????? ????????? ?? ??????
        if (distanceToPlayer < mobAgroRadius)
        {
            // ???? ????? ? ??????? ????
            if (!wasPreviouslyAgroSoundPlayed && zombieAudio != null)
            {
                zombieAudio.PlayAgroSound(); // ??????????? ???? ???? (???? ?? ?????)
                wasPreviouslyAgroSoundPlayed = true;
            }

            // ??????????: ???????? ?? null ????? ???????? ? navMeshAgent.stoppingDistance
            if (navMeshAgent != null && distanceToPlayer > navMeshAgent.stoppingDistance) // ?????????? ? stoppingDistance ??????
            {
                // ????? ?????? ??? ????? -> ??????????
                if (currentState != MobState.Chasing) SwitchState(MobState.Chasing);
            }
            else // ????? ? ??????? ?????
            {
                if (currentState != MobState.Attacking) SwitchState(MobState.Attacking);
            }
        }
        else
        {
            // ????? ??? ??????? ???? -> ????????? ? Idle
            if (wasPreviouslyAgroSoundPlayed)
            {
                wasPreviouslyAgroSoundPlayed = false; // ?????????? ???? ????? ????
            }
            if (currentState != MobState.Idle) SwitchState(MobState.Idle);
        }

        // ????????? ???????? ? ??????????? ?? ???????? (????????????) ?????????
        switch (currentState)
        {
            case MobState.Chasing:
                ProcessChasing(); // ?????????? ????????????
                break;
            case MobState.Attacking:
                ProcessAttacking(); // ?????????? ?????????
                break;
            case MobState.Idle:
                ProcessIdleAggressive(); // ?????? ?????
                break;
            // Fleeing, Stunned, Dead ????????? ?????????????? ???? ? Update
        }
        // --- ????? ?????? ??? ???????????? ?????? ---
    }

     // ??????????: ???????? ????? ??? ??????????? ????????? ? ??????????? ??????
     // ????????????, ????? ????? ?? ???????????? ????????? (????????, Fleeing) ? ??????????? ??????
     void DecideStateBasedOnAggro()
     {
        if (playerTransform == null || currentState == MobState.Dead || currentState == MobState.Stunned) return;

        float distanceToPlayer = Vector3.Distance(transform.position, playerTransform.position);

        if (distanceToPlayer < mobAgroRadius)
        {
             // ??????????: ???????? ?? null ????? ???????? ? navMeshAgent.stoppingDistance
             if (navMeshAgent != null && distanceToPlayer > navMeshAgent.stoppingDistance)
             {
                 SwitchState(MobState.Chasing);
             }
             else
             {
                 SwitchState(MobState.Attacking);
             }
        }
        else
        {
             SwitchState(MobState.Idle);
        }
     }


    // ??????????? ????????? ????
    void SwitchState(MobState newState)
    {
        // ??????????? ????????? ?????? ???? ??? ????? (??? ?????? ? ????, ????? ???????? ??????)
        if (currentState == newState && newState != MobState.Stunned) return;

        // Debug.Log($"{gameObject.name} switching from {currentState} to {newState}"); // ?????????? ????????? ? ????? ?????????
        currentState = newState; // ????????????? ????? ?????????

        // --- ?????????? NavMeshAgent ??? ????? ????????? ? ????????? ?? null ---
        // ??????????, ??? ????? ?????????? ? ??????? ????? ??????????????
        if (navMeshAgent != null && navMeshAgent.enabled)
        {
            switch (currentState)
            {
                case MobState.Idle:
                    navMeshAgent.isStopped = true; // ????????????? ??????
                    navMeshAgent.speed = mobSpeed; // ?????????? ???????? ?? ???????
                    // ??????????: ???????? ?? isOnNavMesh ????? ResetPath
                    if (navMeshAgent.isOnNavMesh) navMeshAgent.ResetPath(); // ??????? ??????? ????
                    // ?????????? ???? ????? ???? ??? ???????? ? Idle
                    wasPreviouslyAgroSoundPlayed = false;
                    break;

                case MobState.Chasing:
                    navMeshAgent.isStopped = false; // ????????? ????????
                    navMeshAgent.speed = mobSpeed; // ????????????? ???????? ?????????????
                    // SetDestination ????? ?????? ? ProcessChasing
                    break;

                case MobState.Attacking:
                    // ????????????? ?????? ??? ?????
                    // ??????????: ???????? ?? isOnNavMesh ????? ??????????/???????
                    if (navMeshAgent.isOnNavMesh) // ?????????, ??? ????? ?? NavMesh ????? ??????????/???????
                    {
                        // ??????????: ???????????? navMeshAgent.isStopped
                        navMeshAgent.isStopped = true;
                        navMeshAgent.ResetPath();
                    }
                    // ???????? ? ?????? ? ?????? ????? ?????????? ? ProcessAttacking
                    break;

                case MobState.Fleeing:
                    navMeshAgent.isStopped = false; // ????????? ????????
                    navMeshAgent.speed = mobFleeSpeed; // ????????????? ???????? ????????
                    InitiateFleeing(); // ????????? ????? ???????? ? ???????? ????????
                    break;

                case MobState.Stunned:
                    navMeshAgent.isStopped = true; // ????????????? ?????? ??? ?????
                    // ??????????: ???????? ?? isOnNavMesh ????? ResetPath
                    if (navMeshAgent.isOnNavMesh) navMeshAgent.ResetPath(); // ??????? ??????? ????
                    stunEndTime = Time.time + stunDuration; // ????????????? ????? ????????? ?????
                    // ??????????? ???? ?????, ???? ZombieAudio ??????????
                    if (zombieAudio != null) zombieAudio.PlayStunSound();
                    break;

                case MobState.Dead:
                    // ?????? ?????? ?????????????? ? OnMobAIDeath
                    // ???? ????? ??? ???????, ?? ????? ???????? ???
                     if (navMeshAgent != null && navMeshAgent.isOnNavMesh)
                     {
                         navMeshAgent.isStopped = true;
                         navMeshAgent.enabled = false;
                     }
                    OnMobAIDeath(); // ???????? ????? ????????? ??????
                    break;
            }
        }
        else if (currentState != MobState.Dead && navMeshAgent == null) // ???? ????? ??????????? ? ?? ?????, ???????? ??????
        {
             // ????????, ??? ?? ?? ?????? ???, ???? ????? ?????? ???????????
             // Debug.LogWarning("Mob NavMeshAgent is null when trying to switch state to " + newState + " on " + gameObject.name);
             // ???? ????? ???????????, AI ?? ?????? ???????? ? ?????????. ???????? ? ??????? ?????????.
             // ???? ????? ??? ???????? (enabled=false), SwitchState ?? ????? ????????,
             // ???, ????????, ???????? ???????? ??????????.
        }
        // --- ????? ?????????? NavMeshAgent ---
    }

    // --- ?????? ????????? ??????? ????????? ---

    void ProcessIdlePeaceful() { /* ? ?????? Idle ??? ?????? ?? ??????, ????? ?????????????? ?????????? ????? */ }
    void ProcessIdleAggressive() { /* ? ??????????? Idle ??? ?????? ?? ??????, ?????? ????? */ }

    void ProcessChasing()
    {
        // --- ???????? ??????????? NavMeshAgent. ?????? ????????????? ????. ---
        // ??????????, ??? ????? ??????????, ???????, ?? NavMesh ? ?? ?????????? ???????, ? ????? ????
        if (playerTransform == null || navMeshAgent == null || !navMeshAgent.enabled || !navMeshAgent.isOnNavMesh || navMeshAgent.isStopped) return;

        // ????????????? ????? ??????? ??????.
        // ?????????????? ???????? ????????? ?? ??????? ???? ?????? ????? ????????????? ?????? ?????? SetDestination,
        // ???? ????? ????? ?? ?????.
        if (Vector3.Distance(navMeshAgent.destination, playerTransform.position) > 0.1f)
        {
            navMeshAgent.SetDestination(playerTransform.position);
        }
        // --- ????? ???????? ??????????? NavMeshAgent ---
    }

    void ProcessAttacking()
    {
        // --- ????? ?????????? ? SwitchState. ????????? ???????? ??????? ??????. ---
        // ????????, ??? ????? ????
        if (playerTransform == null) return;

        // ?????? ??????? ?? ?????? ?? ????? ?????
        Vector3 lookPos = playerTransform.position - transform.position;
        lookPos.y = 0; // ???????? ?????? ?? ???????????
        if (lookPos.magnitude > 0) // ????????, ????? ???????? Quaternion.LookRotation(Vector3.zero)
        {
            Quaternion targetRotation = Quaternion.LookRotation(lookPos);
            // ??????? ???????? ??? ????????
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, Time.deltaTime * 10f); // ???????? ???????? 10f ????? ??????? ??????????
        }


        // ?????????, ?????? ?? ?????????? ??????? ? ????????? ?????
        if (Time.time >= lastAttackTime + (1f / mobAttackRate))
        {
            PerformAttack(); // ????????? ?????
            lastAttackTime = Time.time; // ????????? ????? ????????? ?????
        }
        // --- ????? ????? ?????????? ? SwitchState ---
    }

    // ????????? ????? ???????? ? ????????????? ?? ??? ???? ??? NavMeshAgent
    void InitiateFleeing()
    {
        // ??????????, ??? ????? ??????????, ???????, ?? NavMesh ? ????? ????
        if (playerTransform == null || navMeshAgent == null || !navMeshAgent.enabled || !navMeshAgent.isOnNavMesh)
        {
            SwitchState(MobState.Idle); // ?? ????? ???????, ???????????? ? Idle
            return;
        }
        // navMeshAgent.isStopped = false; // ??? ??????????? ? SwitchState

        // ????????? ??????????? ????? ?? ??????
        Vector3 fleeDirection = (transform.position - playerTransform.position).normalized;
        Vector3 fleeTargetPosition = transform.position + fleeDirection * fleeDistance; // ???????????? ????? ????????

        NavMeshHit hit;
        // ??????? ????????? ???????? ????? ?? NavMesh ????? ? ???????????? ?????
        // ???? ? ??????? ? ??? ???? ?????? fleeDistance ?? ??????, ???? ?????? ???? ????????????
        if (NavMesh.SamplePosition(fleeTargetPosition, out hit, fleeDistance * 2f, NavMesh.AllAreas))
        {
            navMeshAgent.SetDestination(hit.position);
            // Debug.Log($"{gameObject.name} attempting to flee to {hit.position}");
        }
        else
        {
            // ???? ?????? ????? ?? ???????, ??????? ????????? ????? ? ???????
            Vector3 randomDir = Random.insideUnitSphere * fleeDistance;
            randomDir.y = 0; // ?????? ?? ?????? ?????
            // ??????????: ?????????? ????????????? SamplePosition - ?????? ?? ??????? ??????? + ????????? ????????
            if (NavMesh.SamplePosition(transform.position + randomDir + transform.position, out hit, fleeDistance, NavMesh.AllAreas)) // ??????? transform.position
            {
                navMeshAgent.SetDestination(hit.position);
                // Debug.Log($"{gameObject.name} attempting to flee to random pos {hit.position}");
            }
            else
            {
                // ???? ?? ????? ?? ????? ???????? ????? ??? ????????, ????????? ? Idle
                Debug.LogWarning(gameObject.name + " could not find valid flee path. Switching to Idle.");
                SwitchState(MobState.Idle);
            }
        }
        // ???????????: ???? ?????? ??? ?????? ????????
        // if (zombieAudio != null) zombieAudio.PlayPanicSound(); // ???????????, ??? ? ??? ???? ????? ????? ? ZombieAudio
    }

    // ???????????? ?????? ?? ????? ????????? ????????
    void ProcessFleeing()
    {
        // ??????????, ??? ????? ??????????, ???????, ?? NavMesh
        if (navMeshAgent == null || !navMeshAgent.enabled || !navMeshAgent.isOnNavMesh) return;

        // ?????????, ?????? ?? ????? ???? ??? ?? ????? ????????? ??????
        // ?????????? ?????????? ??? ??????? ???? (?????????? ????????? ???????????)
        bool reachedDestination = !navMeshAgent.pathPending && navMeshAgent.remainingDistance <= navMeshAgent.stoppingDistance + 0.1f && (!navMeshAgent.hasPath || navMeshAgent.velocity.sqrMagnitude < 0.1f);

        if (reachedDestination)
        {
            // Debug.Log($"{gameObject.name} reached flee destination or cannot move further.");

            // ????????? ???????? ? ????????? ?? ??????, ????? ??????, ?????????? ?? ????????
            float currentHealthRatio = (mobHealth != null && mobHealth.GetMaxHealth() > 0) ? mobHealth.GetHealth() / mobHealth.GetMaxHealth() : 1f;
            float distanceToPlayer = Vector3.Distance(transform.position, playerTransform.position);

            // ????????? ????? ????, ?.?. ???????? ????????? ?????? ? ?????? ??????
             bool peacefulMode = false;
             try { peacefulMode = PeaceModeManager.IsPeacefulModeActive; }
             catch (System.Exception) { } // Safe check

            if (peacefulMode && (currentHealthRatio > fleeHealthPercentage || distanceToPlayer > fleeDistance * 1.5f)) // Added a buffer to fleeDistance
            {
                // Debug.Log($"{gameObject.name} stopping flee. HealthRatio: {currentHealthRatio}, DistToPlayer: {distanceToPlayer}");
                SwitchState(MobState.Idle); // ???????????? ? Idle
            }
            else if (peacefulMode) // ???????? ??? ??? ?????? ? ????? ???????????? ??????, ???????? ????? ????? ????? ???????? (?????? ? ?????? ??????)
            {
                // Debug.Log($"{gameObject.name} health still low and player near. Finding new flee point.");
                InitiateFleeing(); // ??????? ????? ??????????? ??? ????????
            }
            else // ???? ?????-?? ??????? ?????? ? Fleeing ? ??????????? ?????? ? ???????? ?????
            {
                 // ???????????? ? ??????? ?????? ???????????? ??????
                 DecideStateBasedOnAggro();
            }
        }
        else if (navMeshAgent.pathStatus == NavMeshPathStatus.PathInvalid || navMeshAgent.pathStatus == NavMeshPathStatus.PathPartial)
        {
            // ???? ??????? ???? ???? ?????????? ??? ?????????, ??????? ????? ?????
            // Debug.LogWarning($"{gameObject.name} flee path became invalid/partial. Finding new flee point.");
            // ?????? ???? ?? ??? ??? ? ????????? Fleeing ? ? ?????? ??????
             bool peacefulMode = false;
             try { peacefulMode = PeaceModeManager.IsPeacefulModeActive; }
             catch (System.Exception) { } // Safe check

             if (currentState == MobState.Fleeing && peacefulMode)
             {
                 InitiateFleeing();
             } else if (!peacefulMode)
             {
                 // ???? ???? ???????? ? ??????????? ??????, ??????????
                 DecideStateBasedOnAggro();
             }
        }
    }


    // Executes the attack action (often tied to animation events)
    private void PerformAttack()
    {
        // ??????????? ???????? ?????, ???? ???????? ??????????
        if (mobAnimator != null)
        {
            // ????????? ????????????? ????????? ?? ??? ????? (??????????).
            bool attackTriggerExists = false;
             foreach(var param in mobAnimator.parameters)
             {
                 if(param.type == AnimatorControllerParameterType.Trigger && param.name == attackTriggerName)
                 {
                     attackTriggerExists = true;
                     break;
                 }
             }
             if(attackTriggerExists)
             {
                mobAnimator.SetTrigger(attackTriggerName);
             } else {
                 Debug.LogWarning($"Animator trigger '{attackTriggerName}' not found for {gameObject.name}");
             }
        }

        // ??????????? ???? ?????, ???? ZombieAudio ??????????
        if (zombieAudio != null) zombieAudio.PlayAttackSound();
        // Debug.Log(gameObject.name + " is attacking!");
        // ?????? ????????? ????? ?????? ?????????? ????? ??? ?????????? ?? Animation Event
        // ? ???? ?????? ??? ??????? ?????? ? ??????????? ??????.
    }

    // Handles actions upon death
    private void OnMobAIDeath()
    {
         // ????????, ??? ?????? ?????? ??????????? ?????? ???? ???
         if (currentState == MobState.Dead && !enabled) return;

         Debug.Log("MobAI: " + gameObject.name + " is dead (AI cleanup)!");
         // ????????????? ????????? Dead ?? ?????? ??????, ???? ??? ?? ???? ??????????? ?????
         currentState = MobState.Dead;


        // ????????? NavMeshAgent, ????? ??? ?? ???????? ? ?? ??????????? ????
        if (navMeshAgent != null && navMeshAgent.enabled) // Disable NavMeshAgent if it exists and is enabled
        {
            navMeshAgent.isStopped = true;
            navMeshAgent.enabled = false;
        }

        // ?????? Rigidbody ???????????, ????? ???????? ?????????? ?????????????? ????? ??????
        if (mobRigidbody != null) // Make Rigidbody static to prevent physics interactions after death
        {
            mobRigidbody.velocity = Vector3.zero; // ????????????? ???????? ?? ?????? ??????
            mobRigidbody.isKinematic = true; // Stop physics
            mobRigidbody.constraints = RigidbodyConstraints.FreezeAll; // Freeze position and rotation
        }

        // ??????????? ???? ??????, ???? ZombieAudio ??????????
        if (zombieAudio != null) zombieAudio.PlayDeathSound();

        // ????????? ???????? ??????
        if (mobAnimator != null)
        {
             bool deathTriggerExists = false;
             // ?????????, ???? ?? ??????? ?????? ? ?????????? ?????????
             foreach(var param in mobAnimator.parameters)
             {
                 if(param.type == AnimatorControllerParameterType.Trigger && param.name == deathTriggerName)
                 {
                     deathTriggerExists = true;
                     break;
                 }
             }
             if(deathTriggerExists)
             {
                 mobAnimator.SetTrigger(deathTriggerName);
             } else {
                 Debug.LogWarning($"Animator trigger '{deathTriggerName}' not found for {gameObject.name}");
             }
        }


        // ????????? ??? ?????? AI
        enabled = false;

        // ???????????: ?????????? GameObject ????? ???????? (????????, ????? ?????????? ???????? ??????)
        // StartCoroutine(DelayedDespawn(5f)); // ????? ????? DelayedDespawn
    }

    /* // ?????? coroutine ??? ??????????? ???????????
    private IEnumerator DelayedDespawn(float delay)
    {
        yield return new WaitForSeconds(delay);
        DespawnMob();
    } */

    // Updates animator parameters based on current state and movement
    private void UpdateAnimator()
    {
        // ??????????, ??? ???????? ?????????? ? ????? ??????? ??? ??????????? ????????
        bool hasAnimator = (mobAnimator != null);
        bool isAgentActive = (navMeshAgent != null && navMeshAgent.enabled && navMeshAgent.isOnNavMesh);

        if (!hasAnimator) return; // ?????? ?? ??????, ???? ??? ?????????

        // ??????????, ???????? ?? ??? ????? NavMeshAgent
        // ????????????? sqrMagnitude ??? ?????????????????? ? ?????????? ??????
        bool isMoving = isAgentActive && navMeshAgent.velocity.sqrMagnitude > 0.01f;

        // ????????? ??????? ????????? ? ?????????
        // isWalking ?????? ???? true, ?????? ???? ??? ???????? ? ?? ????????? ? ??????????, ??? ?? ?? ?????? "??????" (?????, ??????, ????, ????????)
        // ? ??????????? ??????: IsWalking = ???????? ? (?????????? ??? Idle). Idle ? ??????????? ?? ????????, ??? ??? IsWalking = ???????? ? ??????????.
        // ? ?????? ??????: IsWalking = ???????? ? ???????.
        // ?????: IsWalking = ???????? ? (????????? ????????????? ??? ????????? ????????)

        if (!string.IsNullOrEmpty(isWalkingBoolName)) // ?????????, ??? ??? ????????? ??????
        {
             bool isWalkingParamExists = false; // ?????????, ???? ?? ??????? ????????
             foreach(var param in mobAnimator.parameters)
             {
                 if(param.type == AnimatorControllerParameterType.Bool && param.name == isWalkingBoolName)
                 {
                     isWalkingParamExists = true;
                     break;
                 }
             }
             if(isWalkingParamExists)
             {
                 mobAnimator.SetBool(isWalkingBoolName, isMoving && (currentState == MobState.Chasing || currentState == MobState.Fleeing));
             } else {
                 // Debug.LogWarning($"Animator bool parameter '{isWalkingBoolName}' not found for {gameObject.name}");
             }
        }


        // Update fleeing animation bool if it exists
        if (!string.IsNullOrEmpty(isFleeingBoolName)) // ?????????, ??? ??? ????????? ??????
        {
            // isFleeing ?????? ???? true, ?????? ???? ??? ? ????????? ???????? ? ????????.
            bool isFleeingParamExists = false; // ?????????, ???? ?? ??????? ????????
             foreach(var param in mobAnimator.parameters)
             {
                 if(param.type == AnimatorControllerParameterType.Bool && param.name == isFleeingBoolName)
                 {
                     isFleeingParamExists = true;
                     break;
                 }
             }
             if(isFleeingParamExists)
             {
                 mobAnimator.SetBool(isFleeingBoolName, currentState == MobState.Fleeing && isMoving);
             } else {
                  // Debug.LogWarning($"Animator bool parameter '{isFleeingBoolName}' not found for {gameObject.name}");
             }
        }
        // ???? ? ??? ???? ???????? "Speed" ???? Float ??? ????? ???????? ????????
         /*
         if (mobAnimator != null)
         {
              bool speedParamExists = false;
              foreach(var param in mobAnimator.parameters)
              {
                  if(param.type == AnimatorControllerParameterType.Float && param.name == "Speed") // ?????????, ??? ??? ????????? ??????????
                  {
                      speedParamExists = true;
                      break;
                  }
              }
              if(speedParamExists)
              {
                 mobAnimator.SetFloat("Speed", isMoving ? navMeshAgent.velocity.magnitude : 0f); // ????????????? ???????? ??????, ???? ????????, ????? 0
              } else {
                  // Debug.LogWarning("Animator float parameter 'Speed' not found for " + gameObject.name);
              }
         }
         */

        // ???????? ????????: ???????? ?????, ????? ? ?????? (`Attack`, `Stun`, `Death`) ??????????????? ? SwitchState ? OnMobAIDeath.
    }

    // Method called by external sources (e.g., player attack) to stun the mob
    public void TakeStun()
    {
        // ?????? ????????, ???? ??? ????? ??? ??? ???????
        if (currentState == MobState.Dead || currentState == MobState.Stunned) return;

        // ????????, ??? ????? ?????????? ????? ??????
        if (navMeshAgent != null && navMeshAgent.enabled && navMeshAgent.isOnNavMesh)
        {
             navMeshAgent.isStopped = true; // ????????????? ?????? ??? ?????
             if (navMeshAgent.hasPath) navMeshAgent.ResetPath(); // ?????????? ????
        }

        SwitchState(MobState.Stunned); // ??????????? ? ????????? ?????
        // Debug.Log(gameObject.name + " is stunned (TakeStun).");

        // ???? ? ???????? ????? ??????????? ? SwitchState
        // SwitchState(MobState.Stunned) ??? ???????? PlayStunSound ? SetTrigger(stunTriggerName)
    }

    // Method to despawn the mob (e.g., after death animation finishes)
    public void DespawnMob()
    {
        // ????????, ??? ?? ?? ???????? ?????????? ??? ???????????? ??????
         if (gameObject != null)
         {
            Destroy(gameObject); // Destroy this GameObject
         }
    }


    // --- *** Animation Event Method *** ---
    // ???? ?? ??????????? Animation Event ??? ????????? ?????, ???? ????? ?????? ???? ?????? ?? ???????? ?????.
    // public void MobDealDamageAnimationEvent()
    // {
    //     // ?????? ????????? ????? ?????? (??????????? ? ?????? ????? ? ????????)
    //      if (playerTransform != null)
    //      {
    //          HealthSystem playerHealth = playerTransform.GetComponent<HealthSystem>();
    //          if (playerHealth != null)
    //          {
    //              // ?????????, ????????? ?? ????? ? ??????? ????? ? ?????? ????? (???????????)
    //              if (Vector3.Distance(transform.position, playerTransform.position) <= mobStoppingDistance * 1.1f) // ????????? ????????? ?????????
    //              {
    //                  playerHealth.TakeDamage(attackDamage); // ???? ?????? ???? ????? ? MobAI
    //                  // Debug.Log(gameObject.name + " dealt " + attackDamage + " damage to player via Animation Event.");
    //              }
    //          }
    //      }
    // }

    // --- *** Animation Event Method *** ---
    // ?????, ?????????? ?? ??????? ???????? "Attack" ??? ????????? ????? ?????
    // ??????????????, ??? ??? ??????? ? ???????? - OnNormalAttackAnimationEnd
    // ??????????: ?????? ????? ?????
    public void OnNormalAttackAnimationEnd()
    {
        // ???? ????? ?????????? ???????? Animation Event ? ????? ???????? "Attack".
        // ????? ?? ????? ????????? ????????? ? ??????? ???????, ??? ?????? ??????.

        // Debug.Log(gameObject.name + ": Animation Event - OnNormalAttackAnimationEnd called.");

        // ???? ??? ??? ??? ? ????????? ? ????????? ????? (?????? ???? ? ??????????? ??????),
        // ???????????? ? ???????? ??????? (????? ???? ?????????? ?????????, ???? ?????? ????????????, ???? ??????? ? Idle)
        if ((mobHealth == null || !mobHealth.IsDead()) && currentState == MobState.Attacking)
        {
             bool peacefulMode = false;
             try { peacefulMode = PeaceModeManager.IsPeacefulModeActive; }
             catch (System.Exception) { } // Safe check

             if (!peacefulMode) // ?????? ? ??????????? ?????? ?????????? ????? ?????
             {
                 DecideStateBasedOnAggro(); // ?????????? ????????? ? ??????????? ??????
             } else {
                 // ???? ?????-?? ??????? ????????? ? ?????? ??????, ???????????? ? Idle
                 SwitchState(MobState.Idle);
             }
        }
        // ???? ????????? ??? ????????? (????????, ??? ??????? ??? ???? ?? ????? ????????),
        // SwitchState ??? ??????????? ?? ?????? ? ?????? ?????????.
    }
    // --- *** ????? Animation Event Method *** ---


    // --- ?????, ?????????? ????? (????????, ???????? ?????) ??? ????????? ????? ---
    // ??????????: ?????????? ?????? NotifyDamageTaken ?? ??
    public void NotifyDamageTaken(float amount)
    {
        // Debug.Log(gameObject.name + " took damage: " + amount);

        // ???????? ?? ?????? ??? ?????????? ? Update ????? HealthSystem.IsDead()
        if (currentState == MobState.Dead) return; // ??????????, ???? ??? ?????

        // --- ?????? ??????? ?? ???? ? ??????????? ?? ?????? ---
        bool peacefulMode = false;
        try { peacefulMode = PeaceModeManager.IsPeacefulModeActive; }
        catch (System.Exception) { } // Safe check

        if (peacefulMode)
        {
            // ? ?????? ?????? ??? ????????? ????? ?????????, ????? ?? ?????? ???????
            if (mobHealth != null) // Ensure mobHealth exists
            {
                float currentHealth = mobHealth.GetHealth();
                float maxHealth = mobHealth.GetMaxHealth();
                // ???? ???????? ????? <= ?????? ? ?? ??? ?? ???????/??????/????????
                if (maxHealth > 0 && currentHealth / maxHealth <= fleeHealthPercentage && currentState != MobState.Fleeing && currentState != MobState.Dead && currentState != MobState.Stunned)
                {
                    SwitchState(MobState.Fleeing); // ????????????? ? ????????? ????????
                }
            }
            // ? ?????? ?????? ????????? ????? ?? ???????? ???????? (?? ????????? ? Chasing/Attacking).
        }
        else // ??????????? ?????
        {
            // ? ??????????? ?????? ????????? ????? ???? ?? ???? ?? ???????? *???????????* ????????.
            // ??? ?????????? ?? ??????? ? Update.
            // ???? ??????, ????? ???? ? ??????????? ?????? ???? ????? (???? ?? ????????? mobAgroRadius),
            // ????? ???????? ?????? ????? (????????, SwitchState(MobState.Chasing) ???? ????? ? ???????????? ???????).
            // ?? ?? ???????? ??, ??? ? ??????????? ?????? ?????? ?? ???????.
        }
        // --- ????? ?????? ??????? ?? ???? ---
    }
    // --- ????? ?????? NotifyDamageTaken ---


    // --- ?????? ??? ???????/????? ---
    void OnDrawGizmosSelected()
    {
        // ??????????? ??????? ???? ? ?????????
        Gizmos.color = Color.red;
        if (transform != null) Gizmos.DrawWireSphere(transform.position, mobAgroRadius);

        // ??????????? ????????? ????????? (?????? ?????)
        Gizmos.color = Color.blue;
        if (transform != null) Gizmos.DrawWireSphere(transform.position, mobStoppingDistance);

        // ??????????? ???? NavMeshAgent (???? ???? ? ??? ???????? ??? ???????)
        if (navMeshAgent != null && navMeshAgent.hasPath && (currentState == MobState.Chasing || currentState == MobState.Fleeing))
        {
            Gizmos.color = Color.yellow;
            // ?????? ???? ??????
            Vector3 lastCorner = transform.position;
            foreach (var corner in navMeshAgent.path.corners)
            {
                Gizmos.DrawLine(lastCorner, corner);
                lastCorner = corner;
            }
             // ?????????? ???????? ?????
            Gizmos.DrawSphere(navMeshAgent.destination, 0.3f);
        }
    }
}